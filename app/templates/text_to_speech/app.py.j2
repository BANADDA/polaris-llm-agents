from fastapi import FastAPI, Depends
from fastapi.responses import FileResponse
from transformers import VitsModel, AutoTokenizer
import torch
import soundfile as sf
from .auth.middleware import verify_token
import uuid

app = FastAPI()
model_id = os.getenv("MODEL_ID")
model = VitsModel.from_pretrained(model_id)
tokenizer = AutoTokenizer.from_pretrained(model_id)

@app.post("/inference")
async def synthesize(text: str, token: str = Depends(verify_token)):
    inputs = tokenizer(text, return_tensors="pt")
    with torch.no_grad():
        output = model(**inputs).waveform
    
    filename = f"{uuid.uuid4()}.wav"
    sf.write(filename, output.numpy().squeeze(), model.config.sampling_rate)
    return FileResponse(filename)