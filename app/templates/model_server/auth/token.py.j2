from fastapi import HTTPException
import firebase_admin
from firebase_admin import credentials, firestore
import time
import jwt

# Initialize Firebase Admin using the rendered JSON file
if not firebase_admin._apps:
    cred = credentials.Certificate("app/auth/config.json")
    firebase_admin.initialize_app(cred)

db = firestore.client()

class TokenManager:
    SECRET = "your-secret-key"
    
    @staticmethod
    async def generate_token(user_id: str, model_id: str) -> str:
        """
        Generate a JWT token for the given user and model, verifying
        the user is authorized to access this model deployment.
        """
        # Create a Firestore-safe key
        safe_model_id = model_id.replace("/", "-").lower()
        doc_path = f"{user_id}-{safe_model_id}"
        doc = db.collection('deployments').document(doc_path).get()
        
        if not doc.exists or doc.to_dict().get('user_id') != user_id:
            raise HTTPException(status_code=403, detail="Unauthorized or invalid user/model.")

        # Build the token payload
        payload = {
            'user_id': user_id,
            'model_id': model_id,
            'exp': time.time() + 3600  # Expires in 1 hour
        }

        # Encode and return as string
        return jwt.encode(payload, TokenManager.SECRET, algorithm="HS256")

    @staticmethod
    def verify_token(token: str) -> dict:
        """
        Decode and validate the JWT token.
        Returns the decoded token data if valid.
        """
        try:
            return jwt.decode(token, TokenManager.SECRET, algorithms=["HS256"])
        except jwt.ExpiredSignatureError:
            raise HTTPException(status_code=401, detail="Token has expired")
        except jwt.InvalidTokenError as e:
            raise HTTPException(status_code=401, detail=f"Invalid token: {str(e)}")
        except Exception as e:
            raise HTTPException(status_code=401, detail=str(e))