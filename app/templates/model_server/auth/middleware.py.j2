from fastapi import Security, HTTPException
from fastapi.security import APIKeyHeader
from app.auth.token import TokenManager

# Define the API key header scheme
api_key_header = APIKeyHeader(name="X-API-Key")

async def verify_token(api_key: str = Security(api_key_header)) -> dict:
    """
    Verify the API key token and return the decoded token data.
    This middleware function is used as a dependency in protected routes.
    
    Args:
        api_key (str): The JWT token from the X-API-Key header
        
    Returns:
        dict: The decoded token data containing user_id and model_id
        
    Raises:
        HTTPException: If token is invalid or authorization fails
    """
    try:
        # Verify and decode the token
        token_data = TokenManager.verify_token(api_key)
        return token_data
    except HTTPException as he:
        # Re-raise HTTP exceptions from TokenManager
        raise he
    except Exception as e:
        # Handle any unexpected errors
        raise HTTPException(
            status_code=401,
            detail=f"Authentication failed: {str(e)}"
        )